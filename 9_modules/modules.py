# Модули

"""Существуют разные способы составления модулей, но самый простой – это создать файл
с расширением .py, содержащий функции и переменные.
Другой способ – написать модуль на том языке программирования, на котором написан
сам интерпретатор Python. Например, можно писать модули на языке программирова-
ния C, которые после компиляции могут использоваться стандартным интерпретатором
Python.
Модуль можно импортировать в другую программу, чтобы использовать функции из
него. Точно так же мы используем стандартную библиотеку Python. Сперва посмотрим,
как использовать модули стандартной библиотеки."""

# import sys

# print('Аргументы командной строки:')
#     for i in sys.argv:
#         print(i)

# print('\n\nПеременная PYTHONPATH содержит', sys.path, '\n')


# Вывод:
# $ python3 using_sys.py we are arguments
# Аргументы командной строки:
# using_sys.py
# we
# are
# arguments

# Переменная PYTHONPATH содержит ['', 'C:\\Windows\\system32\\python30.zip',
# 'C:\\Python30\\DLLs', 'C:\\Python30\\lib',
# 'C:\\Python30\\lib\\plat-win', 'C:\\Python30',
# 'C:\\Python30\\lib\\site-packages']


import sys

for i in sys.argv:
    print(i)


"""Как это работает:
В начале мы импортируем модуль sys командой import. Этим мы говорим
Python, что хотим использовать этот модуль. Модуль sys содержит функции,
относящиеся к интерпретатору Python и его среде, т.е. к системе (system).
Когда Python выполняет команду import sys, он ищет модуль sys. В данном
случае это один из встроенных модулей, и Python знает, где его искать.
Если бы это был не скомпилированный модуль, т.е. модуль, написанный на
Python, тогда интерпретатор Python искал бы его в каталогах, перечисленных в
переменной sys.path. Если модуль найден, выполняются команды в теле мо-
дуля, и он становится доступным. Обратите внимание, что инициализация1
происходит только при первом импорте модуля.
Доступ к переменной argv в модуле sys предоставляется при помощи точки,
т.е. sys.argv. Это явно показывает, что это имя является частью модуля sys.
Ещё одним преимуществом такого обозначения является то, что имя не кон-
фликтует с именем переменной argv, которая может использоваться в вашей
программе.
Переменная sys.argv является списком строк (списки будут детально обсуж-
даться в одной из последующих глав). Она содержит список аргументов команд-
ной строки, т.е. аргументов, переданных программе из командной строки.
Если вы используете среду разработки2 для написания и запуска программ,
поищите где-нибудь в её меню возможность передавать параметры команд-
ной строки.
В нашем примере, когда мы запускаем “python using_sys.py we are
arguments”, мы запускаем модуль using_sys.py командой python, а всё, что
следует далее – аргументы, передаваемые программе3. Python сохраняет ар-
гументы командной строки в переменной sys.argv для дальнейшего исполь-
зования.
Помните, что имя запускаемого сценария4 всегда является первым аргумен-
том в списке sys.argv. Так что в приведённом примере 'using_sys.py'
будет элементом sys.argv[0], 'we' – sys.argv[1], 'are' – sys.argv[2], а
'arguments' – sys.argv[3]. Помните, что в Python нумерация начинается с
0, а не с 1.
sys.path содержит список имён каталогов, откуда импортируются модули.
Заметьте, что первая строка в sys.path пуста; эта пустая строка показывает,
что текущая директория также является частью sys.path, которая совпадает
со значением переменной окружения PYTHONPATH. Это означает, что модули,
расположенные в текущем каталоге, можно импортировать напрямую. В про-
тивном случае придётся поместить свой модуль в один из каталогов, перечис-
ленных в sys.path.
Помните, что текущий каталог – это каталог, в котором была запущена про-
грамма. Выполните import os; print(os.getcwd()), чтобы узнать текущий
каталог программы."""
